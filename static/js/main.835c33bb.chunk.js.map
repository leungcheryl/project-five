{"version":3,"sources":["assets/img-1.jpg","assets/main-dog.png","assets/movie-icon.png","assets/lifeguard-stamp.jpg","DisplayMovie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DisplayMovie","props","react_default","a","createElement","className","name","class","dogStat","src","img","alt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_isMounted","handleChange","event","setState","userInput","target","value","handleClick","preventDefault","componentDidMount","handleReset","allMovies","state","_this2","movieInput","axios","get","method","dataType","headers","X-API-KEY","Accept","params","q","then","response","data","items","movieNamesArray","forEach","movie","push","id","getDogStatus","getPoster","_this3","Promise","all","map","_ref","asyncToGenerator","regenerator_default","mark","_callee","i","url","result","newResult","yes","no","dogDies","wrap","_context","prev","next","concat","sent","values","topicItemStats","console","log","abrupt","objectSpread","t0","message","stop","_x","_x2","apply","arguments","_this4","selectedMovies","_ref2","_callee2","poster","resultPoster","moviePoster","posterUrl","_context2","query","results","post","poster_path","undefined","_x3","_x4","lifeguardlogo","movieicon","maindog","movieimg","onChange","type","placeholder","onClick","src_DisplayMovie","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.835c33bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img-1.29d7d591.jpg\";","module.exports = __webpack_public_path__ + \"static/media/main-dog.5610defc.png\";","module.exports = __webpack_public_path__ + \"static/media/movie-icon.2837dbf3.png\";","module.exports = __webpack_public_path__ + \"static/media/lifeguard-stamp.0018d617.jpg\";","import React from 'react';\nimport './App.css';\n\nconst DisplayMovie = (props) => {\n    return (\n        <div className=\"movie\">\n            <p>{props.name} <p class=\"dog\">{props.dogStat}</p></p>\n            <div className=\"poster\">\n                <img src={props.img} alt='' />\n            </div>\n        </div>\n    )\n}\n\nexport default DisplayMovie;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport DisplayMovie from './DisplayMovie.js';\nimport movieimg from './assets/img-1.jpg';\nimport maindog from './assets/main-dog.png'\nimport movieicon from './assets/movie-icon.png';\nimport lifeguardlogo from './assets/lifeguard-stamp.jpg'\n\n\n\nconst formatDogDeath = (value) => {\n  if (value === null) return 'Watch At Your Own Risk';\n  if (value === false) return 'Good to Go! A Dog Doesn\\'t Die :)';\n  if (value === true) return 'Don\\'t Watch! A Dog Dies :( ';\n};\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userInput: '',\n      allMovies: []\n    }\n  }\n  \n  _isMounted = false\n\n  componentDidMount() {\n    const movieInput = this.state.userInput;\n    axios.get(\n        'https://cors-anywhere.herokuapp.com/https://www.doesthedogdie.com/search?',\n        {\n          method: 'GET',\n          dataType: 'json',\n          headers: {\n            'X-API-KEY': 'e39ba046c39413e2c04848ae44e80a73',\n            Accept: 'application/json'\n          },\n          params: {\n            q: movieInput\n          }\n        }).then(response => {\n          response = response.data.items;\n          const movieNamesArray = [];\n          response.forEach(movie => {\n            movieNamesArray.push({\n              name: movie.name,\n              id: movie.id\n            })\n          })\n\n        this.setState({ \n          allMovies: movieNamesArray \n        })\n\n        this.getDogStatus()\n        this.getPoster()\n      })\n  }\n\n  getDogStatus() {\n    const allMovies = this.state.allMovies;\n    Promise.all(allMovies.map(async (value, i) => {\n        try {\n          const url = `https://cors-anywhere.herokuapp.com/https://www.doesthedogdie.com/media/${value.id}`\n          const result = await axios.get(`${url}`, {\n            method: 'GET',\n            dataType: 'json',\n            headers: {\n              'X-API-KEY': 'e39ba046c39413e2c04848ae44e80a73',\n              Accept: 'application/json'\n            }\n          })\n          \n          const newResult = Object.values(result.data.topicItemStats[0]);\n          console.log(newResult)\n          const yes = newResult[0];\n          const no = newResult[1]\n          let dogDies;\n\n          if (yes > no) {\n            dogDies = true;\n          } else if (yes < no) {\n            dogDies = false;\n          } else {\n            dogDies = null;\n          }\n           return {\n             ...this.state.allMovies[i],\n             dogDies: dogDies\n           }\n\n        } catch (err) {\n          console.log(err.message)\n        }\n      })).then(result => {\n        this.setState ({\n          allMovies : result\n        })\n      });\n  }\n\n  getPoster() {\n    \n    const selectedMovies = this.state.allMovies;\n    console.log(selectedMovies)\n    Promise.all(selectedMovies.map(async (value, i) => {\n      try {\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=8d57b009677e25546dc89ff6368e4fbe&`\n       \n        const poster = await axios.get(`${url}`, {\n        method: 'GET',\n        dataType: 'jsonp',\n        params: {\n          query:`${value.name}`\n        }\n        })\n        console.log(poster)\n        const resultPoster = poster.data.results\n        const moviePoster = resultPoster.map(post => {\n          return post.poster_path\n        })\n       \n          let posterUrl;\n\n          if (moviePoster[0] === undefined) {\n            posterUrl = `https://antmovies.tv/uploads/no-poster.png`\n          } else {\n            posterUrl = `http://image.tmdb.org/t/p/w500${moviePoster[0]}`\n          }\n\n          return {\n            ...this.state.allMovies[i],\n            poster: posterUrl\n          }\n\n      } catch (err) {\n        console.log(err)\n      }\n    })).then(result => {\n      this.setState ({\n        allMovies : result\n      })\n    })\n  }\n\n\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value\n    })\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n\n    this.setState({\n      userInput: ''\n    })\n    this.componentDidMount()\n  }\n\n  handleReset = (event) => {\n    event.preventDefault();\n    this.setState ({\n      allMovies : ['']\n    })\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false\n  }\n\n  render() {\n    return (\n\n    <div className=\"App\">\n\n      <div className=\"header-container\">\n        <div className=\"header\">\n          <div className=\"header-title\">\n            <h1>The <span>Movie</span></h1>\n            <img src={lifeguardlogo} alt='Lifeguard Logo' />\n          </div>\n          \n\n           <h2>(Doggy Edition)</h2>\n          <img src={movieicon} alt=\"Picture of Movie Camera\"/>\n        </div>\n        <div className=\"background-dog\">\n          <img src={maindog} alt=\"Dog wearing 3D glasses and holding popcorn\"/>\n        </div>\n        <div className='scroll-note'>\n          <p>Scroll Down To Search a Movie <span>&#9660;</span>\n          </p>\n        </div>\n      </div>\n\n      <div className=\"main-container\">\n        <div className=\"wrapper\">\n          <div className=\"form-description\">\n            <img src={movieimg} alt=\"Movie and Popcorn Icons\"/>\n            <p>No one wants to see a dog die in a movie.</p> <p>Search a movie in the box and press the Search! button to make sure you never have to see a movie that a dog dies in again.</p><p> Protect dogs at all costs!</p>\n          </div>\n          <div className=\"form\">\n            <form>\n              <input \n                onChange={this.handleChange} \n                type='text' \n                placeholder='Type Movie Here' \n                value={this.state.userInput}\n                name='search' />\n              <button onClick={this.handleClick}>Search!</button>\n              <button type=\"reset\" value=\"Reset\" onClick={this.handleReset}>Reset</button>\n            </form>\n          </div>\n        </div>\n        <p class=\"scroll-here\">Scroll Down for Movie Results</p>\n\n        <div className=\"display\" id=\"display\">\n          \n          {this.state.allMovies.map(movie => {\n            return (\n              <div class=\"display-movie\">\n                <DisplayMovie\n                  img={movie.poster}\n                  name={movie.name}\n                  dogStat={formatDogDeath(movie.dogDies)}\n                />\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n    );\n  }\n  \n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}